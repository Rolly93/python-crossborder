import os
import json
import sqlite3

path = os.path.join(os.path.dirname(__file__), 'data')

DATABASE_FILE = path+'.db'

def create_table():
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    dbcomand ="CREATE TABLE IF NOT EXISTS employee (    id_employee INTEGER PRIMARY KEY AUTOINCREMENT,    firstname VARCHAR (55) NOT NULL,    lastname VARCHAR (55) NOT NULL,    garden CHAR NOT NULL,    phonenumber VARCHAR(50) NOT NULL,    cellphone VARCHAR (50),    charge VARCHAR(50) NOT NULL,    address VARCHAR(255) NOT NULL,    city VARCHAR(150) NOT NULL,    state VARCHAR (150) NOT NULL,    email VARCHAR (250) NOT NULL UNIQUE,    birthday VARCHAR (12) NOT NULL,    create_stamp TEXT DEFAULT (strftime('%Y-%m-%d %H:%M:%S', 'now')));CREATE TABLE IF NOT EXISTS username (    id_username INTEGER PRIMARY KEY AUTOINCREMENT,    id_employee INTEGER,    emai VARCHAR (255) UNIQUE NOT NULL,    username VARCHAR (255) UNIQUE NOT NULL,    password VARCHAR (255) NOT NULL,    FOREIGN KEY (id_employee) REFERENCES employee(id_employee));CREATE TABLE IF NOT EXISTS unittruck (    id_driver INTEGER PRIMARY KEY AUTOINCREMENT,    driver INTEGER,    trucknumber VARCHAR(100) UNIQUE NOT NULL,    truckplates VARCHAR(50) UNIQUE NOT NULL,    working VARCHAR (25) NOT NULL DEFAULT 'yes',    FOREIGN KEY (driver) REFERENCES employee(id_employee));CREATE TABLE IF NOT EXISTS trailer (    id_truck INTEGER PRIMARY KEY AUTOINCREMENT,    driver INTEGER,    unittruck INTEGER,    trailer VARCHAR (250) NOT NULL,    trailer_plate VARCHAR (50) NOT NULL,    seal VARCHAR (100) NOT NULL,    trailer_type VARCHAR (50) NOT NULL DEFAULT '53ft',    conditions VARCHAR (255) NOT NULL DEFAULT 'en condiciones',    registrate TEXT DEFAULT (strftime('%Y-%m-%d %H:%M:%S', 'now')),    FOREIGN KEY (driver) REFERENCES employee(id_employee),    FOREIGN KEY (unittruck) REFERENCES unittruck(id_driver));CREATE TABLE IF NOT EXISTS costumer (    id_company INTEGER PRIMARY KEY AUTOINCREMENT,    name VARCHAR (255) NOT NULL UNIQUE);CREATE TABLE IF NOT EXISTS origen (    id_origen INTEGER PRIMARY KEY AUTOINCREMENT,    name VARCHAR (255) NOT NULL UNIQUE,    address VARCHAR (255),    registrate TEXT NOT NULL DEFAULT (strftime('%Y-%m-%d %H:%M:%S', 'now')));CREATE TABLE IF NOT EXISTS destination (    id_destination INTEGER PRIMARY KEY AUTOINCREMENT,    name VARCHAR (255) NOT NULL,    address VARCHAR (255),    registrate TEXT DEFAULT (strftime('%Y-%m-%d %H:%M:%S', 'now')));CREATE TABLE IF NOT EXISTS assgin_shipment (    id_shipment INTEGER PRIMARY KEY AUTOINCREMENT,    ref_shipment VARCHAR (255) NOT NULL UNIQUE,    ref_company VARCHAR (255) NOT NULL DEFAULT 'N/A',    driver INTEGER,    id_uniittruck INTEGER,    id_trailer INTEGER DEFAULT NULL,    id_client INTEGER,    assignedby INTEGER,    pickup INTEGER,    deliver INTEGER,    FOREIGN KEY (driver) REFERENCES employee(id_employee),    FOREIGN KEY (id_uniittruck) REFERENCES unittruck(id_driver),    FOREIGN KEY (id_trailer) REFERENCES trailer(id_truck),    FOREIGN KEY (id_client) REFERENCES costumer(id_company),    FOREIGN KEY (assignedby) REFERENCES username(id_username),    FOREIGN KEY (pickup) REFERENCES origen(id_origen),    FOREIGN KEY (deliver) REFERENCES destination(id_destination));CREATE TABLE IF NOT EXISTS arrival (    id_arrival INTEGER PRIMARY KEY AUTOINCREMENT,    ref_shipment VARCHAR,    date VARCHAR (50),    comments VARCHAR (255) DEFAULT 'llegada a origen',    trailerfail VARCHAR (100) DEFAULT 'en condiciones',    FOREIGN KEY (ref_shipment) REFERENCES assgin_shipment(ref_shipment));CREATE TABLE IF NOT EXISTS pickup (    id_pickup INTEGER PRIMARY KEY AUTOINCREMENT,    ref_shipment INTEGER,    date VARCHAR (50),    comments VARCHAR (255) DEFAULT 'recolectando caja',    FOREIGN KEY (ref_shipment) REFERENCES assgin_shipment(id_shipment));CREATE TABLE IF NOT EXISTS inspection_MX (    id_inspection_MX INTEGER PRIMARY KEY AUTOINCREMENT,    ref_shipment INTEGER,    date VARCHAR (50),    new_seal VARCHAR(50),    comments VARCHAR (255),    FOREIGN KEY (ref_shipment) REFERENCES assgin_shipment(id_shipment));CREATE TABLE IF NOT EXISTS clear_mx (    id_clear_mx INTEGER PRIMARY KEY AUTOINCREMENT,    ref_shipment INTEGER,    date VARCHAR (50),    comments VARCHAR (255) DEFAULT 'saliendo de aduana MX',    FOREIGN KEY (ref_shipment) REFERENCES assgin_shipment(id_shipment));CREATE TABLE IF NOT EXISTS clear_usa (    id_clear_usa INTEGER PRIMARY KEY AUTOINCREMENT,    ref_shipment INTEGER,    date VARCHAR (50),    comments VARCHAR (255) DEFAULT 'Rojo Mx',    FOREIGN KEY (ref_shipment) REFERENCES assgin_shipment(id_shipment));CREATE TABLE IF NOT EXISTS inspection_usa (    id_inspection_usa INTEGER PRIMARY KEY AUTOINCREMENT,    ref_shipment INTEGER,    date VARCHAR (50),    new_seal VARCHAR(50),    comments VARCHAR (255) DEFAULT 'Rojo Usa',    FOREIGN KEY (ref_shipment) REFERENCES assgin_shipment(id_shipment));CREATE TABLE IF NOT EXISTS safe_yard (    id_safe_yard INTEGER PRIMARY KEY AUTOINCREMENT,    ref_shipment INTEGER,    date VARCHAR (50),    comments VARCHAR (255),    FOREIGN KEY (ref_shipment) REFERENCES assgin_shipment(id_shipment));CREATE TABLE IF NOT EXISTS deliver (    id_deliver INTEGER PRIMARY KEY AUTOINCREMENT,    ref_shipment INTEGER,    date VARCHAR (50),    comments VARCHAR (255),    FOREIGN KEY (ref_shipment) REFERENCES assgin_shipment(id_shipment));CREATE TABLE IF NOT EXISTS complete_trip (    id_complete INTEGER PRIMARY KEY AUTOINCREMENT,    arrival INTEGER,    pickup INTEGER,    mx_clear INTEGER,    mx_inspecction INTEGER,    usa_clear INTEGER,    usa_inspecction INTEGER,    usa_safe_yard INTEGER,    delivered INTEGER,    done CHAR NOT NULL,    FOREIGN KEY (arrival) REFERENCES origen(id_origen),    FOREIGN KEY (pickup) REFERENCES pickup(id_pickup),    FOREIGN KEY (mx_clear) REFERENCES clear_mx(id_clear_mx),    FOREIGN KEY (mx_inspecction) REFERENCES inspection_MX(id_inspection_MX),    FOREIGN KEY (usa_clear) REFERENCES clear_usa(id_clear_usa),    FOREIGN KEY (usa_inspecction) REFERENCES inspection_usa(id_inspection_usa),    FOREIGN KEY (usa_safe_yard) REFERENCES safe_yard(id_safe_yard),    FOREIGN KEY (delivered) REFERENCES deliver(id_deliver));"

    split_commnad = dbcomand.split(";")
    for mycommit in split_commnad:
        pass
        cursor.execute(mycommit)
        conn.commit()
    conn.close()
def creatUser(self):
    
if __name__ == '__main__':
    create_table()
